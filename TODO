# vim:ts=2:sw=2:et:ft=pod:
: << 'END_OF_DOCS'
=head1 TODO 

  Opengrok works fine as a standalone service. When it's fully exploited
  however it becomes a disk and cpu hungry service. While it has the
  concepts of projects it remains to be seen if opengrok can update
  projects asynchronously, perhaps on remote "update slaves". It
  essentially has O(N^2) when you really add several large projects
  to it, like say several linux kernels.

=head2 create project interface to add|remove|update source trees

  Thus far, the "C" and "U" of CRUD is complete. Implementing the
  rest is a real challenge. I may be exceeding the design contract
  for juju config state. I don't like it that if this fails the
  entire charm reports failed and the user would be forced to
  use debug consoles and run individual hooks to discover the fault,
  which may be transiant. For example you could have a perfectly
  good lp repo but the attempt to pull from lp failed for reasons
  outside of your control.

=head2 Create hook to integrate with existing tomcat6 service

  Since a subordinate charm is basically omitting the installation of
  tomcat it should be easy to make this charm both a standalone and
  subordinate capable charm.

=head2 Accomodate shared repos
  
  When cloning and maintaining Linux kernel repos, one typically uses linux-2.6
  as a reference and git merely copies the deltas into the new tree. This saves
  tons of disk space and update time.
  
=cut

END_OF_DOCS
